from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from dotenv import load_dotenv
from fastapi import HTTPException, FastAPI

import app.redis as rd
from app.keyboards import main_client, cancel, delete_user_kb, inline_add_users, inline_add_user_list
from app.request_helper import get_service_id, check_imei

import logging
import json
import os

load_dotenv()

API_TOKEN_SANDBOX = os.getenv("API_TOKEN_SANDBOX")

app = FastAPI()
router = Router()

ALLOWED_USERS = []
PASSWORD_FOR_ADD_ALLOWED_USERS = '123'

class Imei(StatesGroup):
    number = State()

class Allow_User(StatesGroup):
    user = State()

class Super_User_Password(StatesGroup):
    pwd = State()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    try:
        await state.clear()
        user_tg_id = message.from_user.id
        bot_id_redis = message.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        if last_message_id:
            await message.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
            await rd.del_data(user_tg_id, bot_id_redis)
        msg = await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∏ –≤—ã–¥–∞–º –≤–∞–º –Ω–µ–æ–±–æ—Ö–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. üì±",reply_markup=main_client)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ start_command {e}', exc_info=True)


@router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ IMEI')
async def start_check_imei(message: Message, state: FSMContext):
    try:
        user_tg_id = message.from_user.id
        bot_id_redis = message.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        if message.from_user.id not in ALLOWED_USERS:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
            return
        msg = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ IMEI –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=cancel)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        await state.set_state(Imei.number)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ start_check_imei {e}', exc_info=True)


@router.message(Imei.number)
async def handle_imei(message: Message, state: FSMContext):
    try:
        user_tg_id = message.from_user.id
        bot_id_redis = message.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)
        await state.clear()
        imei = message.text.strip()

        if not (8 <= len(imei) <= 15) or not imei.isalnum():
            msg = await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 8 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–∏—Ñ—Ä—ã –∏–ª–∏ –±—É–∫–≤—ã).", reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
            return

        data = await check_imei(imei)

        if data is None:
            msg = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.")
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        else:
            formatted_data = json.dumps(data, indent=2)
            msg = await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n<pre>{formatted_data}</pre>", parse_mode="HTML", reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ handle_imei {e}', exc_info=True)


@app.post("/api/check-imei")
async def api_check_imei(imei: str, token: str):
    if token != API_TOKEN_SANDBOX:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
    
    if not (8 <= len(imei) <= 15) or not imei.isalnum():
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 8 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–∏—Ñ—Ä—ã –∏–ª–∏ –±—É–∫–≤—ã).")
    
    data = await check_imei(imei)

    if data is None:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI.")
    
    return {"–†–µ–∑—É–ª—å—Ç–∞—Ç": data}


@router.message(F.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã')
async def start_check_imei(message: Message, state: FSMContext):
    try:
        await state.clear()
        user_tg_id = message.from_user.id
        bot_id_redis = message.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        if message.from_user.id not in ALLOWED_USERS:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
            return

        service_id = await get_service_id()
        msg = await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI:\n\n{'; '.join(service_id)}", reply_markup=main_client)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ start_check_imei {e}', exc_info=True)


@router.message(F.text == 'white-list')
async def allowed_users(message: Message, state: FSMContext):
    try:
        user_tg_id = message.from_user.id
        bot_id_redis = message.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        msg = await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n(–ü–∞—Ä–æ–ª—å: 123)', reply_markup=cancel)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        await state.set_state(Super_User_Password.pwd)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ allowed_users {e}', exc_info=True)

@router.message(Super_User_Password.pwd)
async def catch_pwd(message: Message, state: FSMContext):
    try:
        await state.clear()
        bot_id_redis = message.bot.id
        user_tg_id = message.from_user.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        if message.text == PASSWORD_FOR_ADD_ALLOWED_USERS:
            msg = await message.answer(f'–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ white-list, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
                                       reply_markup=await inline_add_users(ALLOWED_USERS))
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        else:
            msg = await message.answer('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü–æ–∫–∞', reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ catch_pwd {e}', exc_info=True)

@router.callback_query(F.data == 'add_user')
async def update_allowed_users(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('')
        user_tg_id = callback.from_user.id
        bot_id_redis = callback.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await callback.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        msg = await callback.message.answer(f'–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', reply_markup=cancel)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        await state.set_state(Allow_User.user)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ allowed_users {e}', exc_info=True)

@router.message(Allow_User.user)
async def save_add_user(message: Message, state: FSMContext):
    try:
        await state.clear()
        bot_id_redis = message.bot.id
        user_tg_id = message.from_user.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        if message.forward_from is None:
            msg = await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π!.",
                                        reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
            return

        forwarded_user_tg_id = message.forward_from.id
        forwarded_first_name = message.forward_from.first_name
        if forwarded_user_tg_id in ALLOWED_USERS:
            msg = await message.answer(f'–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ white-list:\n{ALLOWED_USERS}', reply_markup=main_client)
            await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
            return
        ALLOWED_USERS.append(forwarded_user_tg_id)
        msg = await message.answer(f'<b><i>–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ white-list:</i></b>\n\nüë§–ò–º—è: <b>{forwarded_first_name}</b>\nüÜîTG_ID:<b>{forwarded_user_tg_id}</b>\n\n'
                                   f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º: {ALLOWED_USERS}', 
                                   reply_markup=main_client,
                                   parse_mode='HTML')
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ save_add_user {e}', exc_info=True)

@router.callback_query(F.data == 'get_user_list')
async def get_user_list(callback: CallbackQuery, state: FSMContext):
    try:
        user_tg_id = callback.from_user.id
        bot_id_redis = callback.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await callback.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        msg = await callback.message.answer(f'üìã–í–æ—Ç —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–ºüëá', reply_markup=await inline_add_user_list(ALLOWED_USERS))
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ get_user_list {e}', exc_info=True)

@router.callback_query(F.data.startswith('get_user:'))
async def select_user_button(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('')
        bot_id_redis = callback.bot.id
        user_tg_id = callback.from_user.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await callback.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        user_id = int(callback.data.split(':')[1])
        await rd.set_hello_field(user_tg_id, bot_id_redis, 'add_user_id', user_id)

        msg = await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: üÜî Telegram_id: {ALLOWED_USERS[user_id]}',
                                            reply_markup=delete_user_kb)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_user_button: {e}", exc_info=True)

@router.callback_query(F.data == 'delete_user')
async def delete_user_button(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('')
        user_tg_id = callback.from_user.id
        bot_id_redis = callback.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await callback.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)

        user_id = await rd.get_hello_field(user_tg_id, bot_id_redis, 'add_user_id')
        ALLOWED_USERS.pop(user_id)
        msg = await callback.message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.', reply_markup=main_client)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_user_button: {e}", exc_info=True)


@router.callback_query(F.data == 'cancel')
async def cancel_button(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('')
        await state.clear()
        user_tg_id = callback.from_user.id
        bot_id_redis = callback.bot.id
        last_message_id = await rd.get_user_message(user_tg_id, bot_id_redis)
        await callback.bot.delete_message(chat_id=user_tg_id, message_id=last_message_id)
        await rd.del_data(user_tg_id, bot_id_redis)
        msg = await callback.message.answer(f'–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', reply_markup=main_client)
        await rd.set_user_message(user_tg_id, msg.message_id, bot_id_redis)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ cancel_button {e}', exc_info=True)